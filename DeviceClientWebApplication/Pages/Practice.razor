@page "/practice"
@page "/practice/{deviceId}"

<div>

    <HeadingComponent /> 

<h1>Counter</h1>

<div>Device id: @DeviceId</div>

<p>Current deviceId: @currentDeviceProperties</p>

<button class="btn btn-primary" @onclick="IncrementApiKey">Click me</button>
</div>

<div>

<input @bind-value="CurrentValue" @bind-value:event="oninput" />
<p>This string will get value from above text field : @CurrentValue</p>

</div> 

<div>
    <h1 style="font-style:@_headingFontStyle">@_headingText</h1>
</div>

<div>
    <PracticePeek extra=10 DeviceTitle="Could be any Device Title" OnClick="@ShowMessage" @bind-OnState="ParentOnState">This will be rendered</PracticePeek>
    <p><b>@messageText</b></p>
    <button @onclick="ChangeTheOnState">Toggle On State</button>
</div>

<div>

<h2>
Data Binding
</h2>
<input @bind="MyInt" /> 
<input @bind="MyDouble" /> 
</div>

<div>
    <h2>Formatting</h2>
    <input @bind="StartDate" /> 
</div>

<div>
    <h2>Some buttons</h2>
    <h3>@message</h3>
    @for (var i = 1; i < 4; i++) 
    {
        var buttonNumber = i; 

        <button class="btn btn-primary" @onclick="@(e => UpdateHeading(e, buttonNumber))">
            Button #@i
            
        </button>
    }

</div>

<div>
    <PasswordField @bind-Password="password" /> 
</div>

<div>
    <EditExampleModelForm />
</div>

@code {
    private string password; 
    private int currentDeviceProperties = 0;
    private string _headingFontStyle = "italic";
    private string _headingText = "Put on your new Blazor!";

    string CurrentValue = "";
    private string messageText;

    [Parameter]
    public string DeviceId { get; set; }

    protected override void OnInitialized() 
    {
        DeviceId = DeviceId ?? "No Device Id provided"; 
    }

    [Parameter]
    public DateTime StartDate {get; set;} = new DateTime(1992, 3, 2); 

    [Parameter]
    public int MyInt { get; set; } = 123; 

    [Parameter]
    public double MyDouble { get; set; } = 123.32; 

    private void IncrementApiKey()
    {
        currentDeviceProperties++;
    }

    private void ShowMessage(MouseEventArgs e)
    {
        messageText = "Blaze a new trail with Blazor!";
    }

    [Parameter]
    public bool ParentOnState {get; set;} = false; 

    private void ChangeTheOnState(){
        ParentOnState = !ParentOnState; 
    }

    private string message = "Select a button to learn its position"; 

    private void UpdateHeading(MouseEventArgs e, int buttonNumber) 
    {
        message = $"You selected Button #{buttonNumber}" + $"mouse position: {e.ClientX} X {e.ClientY}."; 
    }
}
